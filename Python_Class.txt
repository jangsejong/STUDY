클래스란?
데이터와 데이터를 조작하 는 함수를 하나의 묶음으로 관리할 수 있으므로 복잡한 프로그램도 더욱 쉽게 작성할 수 있습니다.

절차형 프로그래밍 : 각 데이터를 리스트로 보관?
객체형 프로그래밍 : 각 데이터들을 하나의 객체 단위로 보관

클래스는 데이터와 데이터를 조작하는 함수의 묶음임.
클래스를 통해 특정 객체가 가지는 데이터와 그 데이터를 어떻게 조작해야 되는지 메소드가 정의됨으로 복잡한 프로그램도 마치 현실 세계처럼 구현할 수 있음.



########self########

파이썬 메서드의 첫 번째 매개변수 이름은 관례적으로 self를 사용한다. 객체를 호출할 때 호출한 객체 자신이 전달되기 때문에 self를 사용한 것이다. 
물론 self말고 다른 이름을 사용해도 상관없다.
※ 메서드의 첫 번째 매개변수 self를 명시적으로 구현하는 것은 파이썬만의 독특한 특징이다. 예를 들어 자바 같은 언어는 첫 번째 매개변수 self가 필요없다.
Self 개념
클래스 내에서 정의된 함수를 메소드라고 함.
통상, 메소드의 첫 번째 인자는 항상 self가 들어옴
근데, 대체 self의 정체는 무엇인가? 왜 쓰는가?
self는 클래스로 생성된 인스턴스를 의미함. 클래스로 인스턴스가 생성되면 해당 인스턴스는 특정 메모리 주소에 저장이 되는데, 그게 어디에 있는지 알기 위해서는 self를 통해 접근을 도와줌





######## __init__########

FourCal 클래스의 인스턴스 a에 setdata 메서드를 수행하지 않고 add 메서드를 수행하면 "AttributeError: 'FourCal' object has no attribute 'first'" 오류가 발생한다. 
setdata 메서드를 수행해야 객체 a의 객체변수 first와 second가 생성되기 때문이다.
이렇게 객체에 초깃값을 설정해야 할 필요가 있을 때는 setdata와 같은 메서드를 호출하여 초깃값을 설정하기보다는 생성자를 구현하는 것이 안전한 방법이다. 
생성자(Constructor)란 객체가 생성될 때 자동으로 호출되는 메서드를 의미한다.
파이썬 메서드 이름으로 __init__를 사용하면 이 메서드는 생성자가 된다. 
※ __init__ 메서드의 init 앞뒤로 붙은 __는 언더스코어(_) 두 개를 붙여 쓴 것이다.
class Calc:
    def set(self, n1, n2):
    	self.n1 = n1 
        self.n2 = n2
 
    def add(self, n1, n2):
        return self.n1 + self.n2 
 

위의 함수에서 add라는 더하기 메서드를 set으로 먼저 정의하지 않고 사용한다면 오류가 발생합니다.

그것을 방지하기 위해 

 

class Calc:
    def __init__(self, n1, n2):
    	self.n1 = n1 
        self.n2 = n2
 
    def add(self, n1, n2):
        return self.n1 + self.n2 
set -> __init__으로 바꾸어 클래스를 호출할 때 생성자 매개변수가 없다면 실행이 되지 않게 됩니다.


########__call__########

클래스의 인스턴스 또한 함수로 취급될 수 있는데, 이는 다른 함수의 파라메터가 될 수 있는 것을 의미하죠. 이 경우에 우리는 __call__ 함수가 필요하게 됩니다. 
예를 들어 Class A가 있고, 인스턴스로 a를 선언 했습니다. 
여기에 __call__(x, y) 함수가 선언되어 있다면, 이 함수를 호출 하는 경우 우리는 x.__call__(x, y)를 사용할 수 도 있지만 x(x, y)도 가능 합니다.
함수를 호출 하는 것처럼 클래스의 객체도 호출하게 만들어주는 메서드가 __call__입니다! 

즉, __init__ 은 인스턴스 초기화를 위해, __call__ 은 인스턴스가 호출됐을 때 실행되는 것입니다.


class Calc:
    def __init__(self, n1, n2):
        self.n1 = n1 
        self.n2 = n2
        return print(self.n1, self.n2)

    def __call__(self, n1, n2):
        self.n1 = n1 
        self.n2 = n2
        return print(self.n1 + self.n2)

s = Calc(1,2)

s(7,8)
 

앞서 __init__ 을 설명했을 때 코드를 조금 수정해서 만들었습니다.
이렇게 됐을때 출력은 어떻게 될까요?

1 2 

15 

이렇게 출력이 됩니다.
이처럼 __init__ 으로 클래스를 생성하고 
__call__ 로 정의된 것을 함수처럼 불러오게 하는 역할을 합니다. 

이를 이용해 데코레이션 @ 이나 다양하게 사용할 수 있습니다.


#########상속########

상속(Inheritance)이란 "물려받다"라는 뜻으로, "재산을 상속받다"라고 할 때의 상속과 같은 의미이다.
클래스에도 이 개념을 적용할 수 있다. 어떤 클래스를 만들 때 다른 클래스의 기능을 물려받을 수 있게 만드는 것이다.

보통 상속은 기존 클래스를 변경하지 않고 기능을 추가하거나 기존 기능을 변경하려고 할 때 사용한다.

"클래스에 기능을 추가하고 싶으면 기존 클래스를 수정하면 되는데 왜 굳이 상속을 받아서 처리해야 하는 이유는
기존 클래스가 라이브러리 형태로 제공되거나 수정이 허용되지 않는 상황일때 상속을 사용해야 한다.

이제 원래 목적인 a의 b제곱(ab)을 계산하는 MoreFourCal 클래스를 보면

>>> class MoreFourCal(FourCal):
...     def pow(self):
...         result = self.first ** self.second
...         return result
...
>>>
pass 문장은 삭제하고 위와 같이 두 수의 거듭제곱을 구할 수 있는 pow 메서드를 추가해 주었다. 그리고 다음과 같이 pow 메서드를 수행해 보자.

>>> a = MoreFourCal(4, 2)
>>> a.pow()
16
MoreFourCal 클래스로 만든 a 객체에 값 4와 2를 설정한 후 pow 메서드를 호출하면 4의 2제곱 (42)인 16을 돌려주는 것을 확인할 수 있다.

상속은 MoreFourCal 클래스처럼 기존 클래스(FourCal)는 그대로 놔둔 채 클래스의 기능을 확장시킬 때 주로 사용한다.



#########Classs 와 def 의 차이점########

: 클래스 함수도 함수의 일종이라는 점을 강조하였지만 사실 적이 않은 차이점을이 있다MSE.RMSE.RMSLE

1. 클래스 함수는 def 대신 class 로 정의하는 객체 생성 함수로 이를 호출하면 내부에 정의된 대로의 객체를 리턴한다는 특징이 있지만 
  호출시 내부 코드를 실행한다는 점에서는 일반 파이썬 함수와 전혀 다를바가 없다.

2. 일반 파이썬 함수 내부에 정의된 함수는 변수가 자신의 네임스페이스에서 발견되지 않는 경우 외부(상위) 함수의 네임스페이스에서 그 변수를 조회하게 되지만,
 클래스 함수 내부에 정의된 함수는 그런 방식의 조회를 하지 않습니다. 클래스 함수의 경우에는  '.' 찍는 방식으로 네임스페이스를 정확하게 지정하는 방식을 사용합니다.
즉, 클래스 함수 내부의 필드나 메서드는 '.'을 찍는 방식으로 네임스페이스를 표시하여 접근할 수 있지만,
 일반 함수는 그 자체의 네임스페이스를 가짐에도 불구하고 그렇게 접근할 수 없습니다. 일반 함수의 경우에는 해당 네임스페이스에 변수가 없으면 상위 네임스페이스에 조회하는 방식으로 변수를 찾을 수 있을 뿐입니다.

3. ③ 클래스 함수 내부에 정의되는 내부 함수를 보면 인자가 하나라도 있는 것과 그렇지 않은 것이 있는데 인자가 하나라도 있는 내부 함수는 이 클래스 함수 호출로 생성되는 객체(인스턴스)의 내부 함수(메서드)로 사용가능하도록 자동 등록됩니다

class Class_sample():
    z=1
    print("z in Class_sample: ", z)
    def __init__(self):
        self.z=2
        print("z init as :", self.z)
    def class_func():
        print("z by class_func: ", Class_sample.z)
    def instance_func(self):
        print("z by instance_func: ", self.z)

instance_sample = Class_sample()
Class_sample.class_func() #Class_sample.instance_func()시 에러
instance_sample.instance_func() #instance_sample.class_func() 시 에러
Class_sample.instance_func(instance_sample) #정상 처리가 됨

이렇게 일반적으로 말할 수 있는 이유는 클래스 함수 내에서 정의된 함수를 - 이 클래스 함수 호출에 의해 생성된 - 객체(인스턴스)에서 호출하는 경우 제1인자로 바로 그 자신(그 생성된 객체)가 자동입력된다는 점에 있습니다.

그래서 인스턴스에서 호출할 함수(메서드) 정의시 반드시 자동입력될 객체를 받아줄 변수(파라미터)를 'self' 등의 이름을 사용하여 표시해주어야 하는 것입니다.

4.  클래스 함수의 내부 함수 중 '__init__'이라는 이름의 함수가 있으면 이는 클래스 함수 호출시 객체(인스턴스) 생성 직후 이어서 자동으로 생성된 그 객체의 메서드로서 호출됩니다.
 즉, 인스턴스의 메서드로 호출되는 것이기 때문에 자동으로 그 자신(인스턴스)이 인자로 주어지며 이를 받아줄 변수(파라미터)를 'self' 등의 이름으로 표시해주어야 합니다.
 이 '__init__' 메서드를 통해서 우리는 객체(인스턴스) 생성시 매번 해주어야 하는 번거로운 작업이 있을 경우 이를 간단하게 처리할 수 있습니다.

 class Class_sample():
    pass # 아무 일도 하지 말라는 파이썬 명령어

instance_sample1 = Class_sample()
instance_sample1.z=2 # init 작업으로 생략된 중복 부분
print("z init in instance1 as :", instance_sample1.z) # init 작업으로 생략된 중복 부분
print("z in sample1: ", instance_sample1.z)

instance_sample2 = Class_sample()
instance_sample2.z=2 # init 작업으로 생략된 중복 부분
print("z init in instance1 as :", instance_sample2.z) # init 작업으로 생략된 중복 부분
print("z in sample2: ", instance_sample2.z)

5. 클래스 함수를 호출하여 객체(인스턴스)를 생성할 때 다른 함수처럼 인자를 입력할 수 있습니다. 하지만 일반 함수의 호출할 때와는 조금 다르다는 점을 알 수 있습니다
def foo(a):
    z=a
    print("z in foo: ", z)

foo(2)

하지만 클래스 함수는 이와 같은 코드를 실행하면 에러를 발생시킵니다.
class Class_name(a):
    z=a
    print("z in Class_name: ", z)

Class_name(2)
NameError: name 'a' is not defined
그 이유는 클래스 함수 정의 단계시 그 식별자 뒤에 오는 괄호 안에는 클래스 함수 호출시 입력하는 인자를 받아내는 변수(파라미터)를 표시할 수 없게 되어 있습니다. 
왜냐하면 여기에 명시할 수 있는 것은 원칙적으로 클래스 함수의 식별자뿐이기 때문입니다. 
그래서 클래스 함수 호출시 인자를 입력할 필요가 있는 경우 이를 클래스 함수 내부에서 받아내는 식별자는 위 자리 대신 클래스 함수 정의시 클래스 함수 내부에서 '__init__' 함수을 반드시 정의하면서 이 '__init__' 함수의 인자 자리에 표시되어야 합니다.
이 이야기는 결국 클래스 함수 호출시 인자를 입력하는 경우 이 인자를 사용할 수 있는 내부 메서드는 오로지 '__init__' 메서드에 한정된다는 뜻입니다.
class Foo():
    def __init__(self, x) : #이 함수는 인스턴스 메서드로 실행되므로 제1인자로 자기자신
                            #을 받는 식별자를 우선 표시하고 그 다음에 클래스 함수 호출
                            #시 입력되는 인자를 받아내는 식별자(파라미터)를 표시함
        z=x
        print("z in class Foo: ", z)
    
Foo(2)
z in class Foo:  2
반면, 클래스 함수 내부의 '__init__' 이외의 메서드 정의시 식별자 뒤 괄호 안에 표시된 식별자(파라미터)들은 클래스 함수 호출로 생성된 객체를 통해서 호출되는 메서드의 인자를 - 객체 생성이 마쳐진 이후 - 그 호출 단계에서 받아내는 파라미터들입니다.
class Class_sample():
    z=1
    print("z in Class_sample: ", z)
    def __init__(self):
        self.z=2
        print("z init as :", self.z)
    def instance_func(self, x):
        print("z by instance_func: ", self.z)
        print(x)
        
foo = Class_sample()
foo.instance_func(3)
z in Class_sample:  1
z init as : 2
z by instance_func:  2
3
⑥ 클래스 함수 정의 단계시 그 식별자 뒤에 오는 괄호 안은 클래스 함수 호출시 입력하는 인자를 받아내는 변수(파라미터)를 표시하는 자리가 아니라 
이미 정의 작업이 마쳐진 다른 클래스 함수의 식별자를 표시해주는 자리입니다.
그런데 어떤 클래스 함수를 정의할 때 그 식별자 뒤 괄호 안에 다른 클래스의 식별자를 지정해주는 이유는 무엇이며 이렇게 정의된 클래스 함수를 호출하는 경우 
파이썬 인터프리터는 어떤 작동을 하게 되는가요?
class Human():
    species = 'human'        #상위 클래스와 하위 클래스 공통 클래스 속성(필드)
    def __init__(self):
        self.lifespan = 100
    def nature(self):        #상위 클래스와 하위 클래스 공통 클래스 메서드
        print("good nature")

class Lawyer(Human):
    status = "rich"          #추가된 클래스 속성(필드)
    def __init__(self):      #덮어씌워지는 메서드
        self.job = 'lawyer'
        self.lifespan = 200  #추가된 객체 속성(필드)
        
print("Peter Case: ")
peter = Human()
print(peter.species, "  ", peter.lifespan)
peter.nature()

print("James Case: ")
james = Lawyer()
print(james.species, "  ", james.job, "  ", james.lifespan, "  ", james.status)
james.nature()
Peter Case: 
human    100
good nature
James Case: 
human    lawyer    200    rich
good nature
새 클래스 함수 정의시 식별자 뒤 괄호 안에 다른 클래스 식별자를 표시한다는 것은 - 
충돌하는 내용이 있으면 이를 주석 처리하여 새 클래스 함수의 정의를 따르게 하는 것을 제외하고는 - 
그 다른 클래스 함수를 정의하는 내용을 그대로 복사해서 가져온다는 것을 의미한다고 쉽게 생각할 수 있습니다. 
그래서 위 두 클래스 함수 정의는 다음과 같은 뜻이라는 것을 알 수 있습니다.
class Human():
    species = 'human'        #상위 클래스와 하위 클래스 공통 클래스 속성(필드)
    def __init__(self):
        self.lifespan = 100
    def nature(self):        #상위 클래스와 하위 클래스 공통 클래스 메서드
        print("good nature")

class Lawyer():
###복사 시작###
    species = 'human'        #상위 클래스와 하위 클래스 공통 클래스 속성(필드)
#   def __init__(self):      충돌하는 내용이 있으니 메서드 전체 주석 처리
#       self.lifespan = 100  
    def nature(self):        #상위 클래스와 하위 클래스 공통 클래스 메서드
        print("good nature")
###복사 끝###

    status = "rich"          #추가된 클래스 속성(필드)
    def __init__(self):      #덮어씌워지는 메서드
        self.job = 'lawyer'
        self.lifespan = 200  #추가된 객체 속성(필드)

print("Peter Case: ")
peter = Human()
print(peter.species, "  ", peter.lifespan)
peter.nature()

print("James Case: ")
james = Lawyer()
print(james.species, "  ", james.job, "  ", james.lifespan, "  ", james.status)
james.nature()
Peter Case: 
human    100
good nature
James Case: 
human    lawyer    200    rich
good nature
역시 실행 결과는 완전히 같습니다.
이를 두고 자식 클래스인 Lawyer 클래스는 부모 클래스인 Human 클래스를 상속했다고 표현합니다.
이런 상속 기법은 여러 클래스들의 조상 클래스를 만들어서 클래스 사이에 위계적인 정돈을 할 수 있게 해줍니다.
참고로 주석 처리된 것을 다시 복사해서 가져오는 것도 가능합니다. 
이 경우 부모 클래스 함수의 메서드를 실행하는 것을 가능하게 해주는 super()라는 일종의 내장 함수를 사용합니다.
class Human():
    species = 'human'        #상위 클래스와 하위 클래스 공통 클래스 속성(필드)
    def __init__(self):
        self.lifespan = 100
    def nature(self):        #상위 클래스와 하위 클래스 공통 클래스 메서드
        print("good nature")

class Lawyer(Human):
    status = "rich"          #추가된 클래스 속성(필드)
    def __init__(self):      #덮어씌워지는 메서드
        self.job = 'lawyer'
        self.lifespan = 200  #추가된 객체 속성(필드)
        super().__init__()   #이는 부모 클래스의 __init__ 메서드 내의
                             # self.lifespan = 100 을 실행하는 셈
        
print("Peter Case: ")
peter = Human()
print(peter.species, "  ", peter.lifespan)
peter.nature()

print("James Case: ")
james = Lawyer()
print(james.species, "  ", james.job, "  ", james.lifespan, "  ", james.status)
james.nature()
Peter Case: 
human    100
good nature
James Case: 
human    lawyer    100    rich
good nature

7. 이상을 종합하여 보면 일반 함수 정의는 그 내부의 코드를 실행하는 것이 목적이라고 할 수 있고 
클래스 함수 정의는 그 호출을 통해 생성되는 객체 내부 네임스페이스에 일정한 속성과 메서드를 의도한 바대로 귀속시켜 정돈하고 
그 객체로 하여금 보완적으로 클래스 함수 내부 네임스페이스도 역시 접근할 수 있도록 하는 것이 목적이라고 할 수 있습니다.

링크: 

https://wikidocs.net/28
https://wikidocs.net/774
https://post.naver.com/viewer/postView.naver?volumeNo=27854409&memberNo=21815&vType=VERTICAL
