iterator 패턴
:iterate는 '반복하다'라는 뜻이고, iterator은 '반복자'라는 뜻이다. 즉 무엇인가 반복할 때 iterator 객체를 사용한다. 
 iterator 객체는 반복하는 데 필요한 첫 번째 요소를 가리키는 메서드, 다음 요소를 가리키는 메서드, 마지막 요소를 가리키는 메서드, 
 현재 포인터가 가리키고 있는 요소를 반환하는 메서드 등을 포함한다.

iterator 패턴은 반복이 필요한 자료구조를 모두 동일한 인터페이스를 통해 접근할 수 있도록 iterator 객체 속에 넣은 다음, 
iterator 객체의 메서드를 이용해 자료구조를 활용할 수 있도록 해준다.

반복에 사용되는 자료구조에는 배열, 리스트, Set, Map 등 있다. 
이들의 특징은 어떤 데이터의 집합체라는 것이다. 따라서 개별 원소로 여러 가지 작업을 하게 된다. 
이때 데이터들의 집합체를 모두 동일한 인터페이스를 사용하여 조작할 수 있게 하면 데이터들의 집합체를 쉽게 사용할 수 있을 것이다. 이 역할을 하는 것이 iterator 패턴이다. 
예를 들어 배열의 경우 for 문을 사용하여 변수 i 값을 하나씩 증가시켜 원소들의 값을 조작한다.

iterator 패턴은 바로 값을 1씩 증가시키는 변수 i의 역할을 한다. 즉 변수 i의 역할을 추상화해서 일반화한 것이 iterator 패턴이다. 
따라서 iterator 패턴은 배열 등에서 원소를 순서대로 조작하면서 전체를 검색하는 역할을 담당한다.

aggregate 인터페이스는 요소들이 나열되어 있는 집합체로서 iterator 메서드를 가지고 있고, 이 메서드는 집합체에 대응하는 iterator를 1개 작성한다. 
또 이것을 사용해서 iterator 인터페이스를 실제로 구현한 클래스의 인스턴스(concreteIterator 클래스)를 1개 만들어 
집합체를 하나씩 나열하고, 검색하고, 조사하게 된다. 또 concreteAggregate 클래스는 aggregate 역할이 정한 인터페이스를 실제로 구현한다.


리스트, 집합, 딕셔너리와 같은 컬렉션이나 문자열, 문자 시퀀스등은 for문을 사용해 하나씩 데이터를 처리 할 수 있는데 
이렇게 하나 하나 처리할 수 있는 컬렉션이나 시퀀스들을 Iterable 객체라고 부른다. 
연속된 숫자를 미리 만들어 두면 숫자가 많아질수록 메모리도 많이 사용하게 되므로 파이썬에서는 Iterator를 생성하여 값이 필요할 때만 만들어주는 방식을 사용한다.

 - Iterator 객체 : 값을 차례대로 꺼낼 수 있는 객체

 - iterator는 iterable한 객체를 내장함수 또는 Iterable 객체의 메소드로 객체를 생성할 수 있다.

 - iterable 객체 : 반복이 가능한 객체. list, dict, set, str, bytes, tuple, range등이 있다.

 - 내장함수 iter()를 사용해 만들 수 있다

 for i in [1, 2, 3, 4, 5]:
    print(i)
1
2
3
4
5

1. iter()

list_data = [1, 2, 3]
list_iter = iter(list_data)
type(list_iter)

# list_iterator

list_data = list(iter(list_data))
list_data

# [1,2,3]

2. __iter__와 __next__

set_data = {1, 2, 3, 4}

set_iter = set_data.__iter__()

type(set_iter)             #set_iterator

set_iter.__next__()        #__next__() 함수를 사용해 하나씩 값을 꺼낼 수가 있다.next
1
set_iter.__next__()
2
set_iter.__next__()
3
set_iter.__next__()
4
set_iter.__next__()        # 값이 없으면 오류가 발생
--------------------------
stopIteration


더이상 꺼낼 값이 없으면 오류가 발생한다.


